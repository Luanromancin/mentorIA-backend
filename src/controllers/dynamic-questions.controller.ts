import { Request, Response } from 'express';
import { DynamicQuestionsService } from '../services/dynamic-questions.service';
import { UserCompetencyRepository } from '../repositories/user-competency.repository';
import { SparseCompetencyService } from '../services/sparse-competency.service';

export class DynamicQuestionsController {
  private dynamicQuestionsService: DynamicQuestionsService;
  private sparseCompetencyService: SparseCompetencyService;

  constructor() {
    const userCompetencyRepository = new UserCompetencyRepository();
    this.dynamicQuestionsService = new DynamicQuestionsService(
      userCompetencyRepository
    );
    this.sparseCompetencyService = new SparseCompetencyService();
  }

  /**
   * GET /api/questions/dynamic
   * Busca quest√µes din√¢micas baseadas no n√≠vel de compet√™ncia do usu√°rio
   */
  async getDynamicQuestions(req: Request, res: Response): Promise<Response> {
    try {
      const profileId = (req as any).user?.id;
      if (!profileId) {
        return res.status(401).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
        });
      }

      const maxQuestions = parseInt(req.query.maxQuestions as string) || 20;

      const questions = await this.dynamicQuestionsService.getDynamicQuestions({
        profileId,
        maxQuestions,
      });

      return res.json({
        success: true,
        data: questions,
      });
    } catch (error) {
      console.error('Erro ao buscar quest√µes din√¢micas:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
      });
    }
  }

  /**
   * POST /api/questions/answer
   * Submete resposta do usu√°rio e atualiza n√≠vel de compet√™ncia
   */
  async submitAnswer(req: Request, res: Response): Promise<Response> {
    try {
      const profileId = (req as any).user?.id;
      if (!profileId) {
        return res.status(401).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
        });
      }

      const { questionId, answer, isCorrect, competencyName } = req.body;

      if (
        !questionId ||
        answer === undefined ||
        isCorrect === undefined ||
        !competencyName
      ) {
        return res.status(400).json({
          success: false,
          message: 'Dados incompletos para submiss√£o da resposta',
        });
      }

      // Salvar resposta do usu√°rio
      await this.saveUserAnswer(profileId, questionId, answer, isCorrect);

      // Atualizar n√≠vel de compet√™ncia
      await this.dynamicQuestionsService.updateCompetencyLevel(
        profileId,
        competencyName,
        isCorrect
      );

      return res.json({
        success: true,
        message: 'Resposta processada com sucesso',
      });
    } catch (error) {
      console.error('Erro ao processar resposta:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
      });
    }
  }

  /**
   * GET /api/competencies/user
   * Busca compet√™ncias do usu√°rio com n√≠veis
   */
  async getUserCompetencies(req: Request, res: Response): Promise<Response> {
    try {
      const profileId = (req as any).user?.id;
      if (!profileId) {
        return res.status(401).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
        });
      }

      const userCompetencyRepository = new UserCompetencyRepository();
      const competencies = await userCompetencyRepository.findByProfileId(
        profileId
      );

      return res.json({
        success: true,
        data: competencies,
      });
    } catch (error) {
      console.error('Erro ao buscar compet√™ncias do usu√°rio:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
      });
    }
  }

  /**
   * GET /api/questions/session
   * Busca sess√£o completa com compet√™ncias e quest√µes
   */
  async getSessionQuestions(req: Request, res: Response): Promise<Response> {
    try {
      const profileId = (req as any).user?.id;
      if (!profileId) {
        return res.status(401).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
        });
      }

      const maxQuestions = parseInt(req.query.maxQuestions as string) || 20;

      // Buscar compet√™ncias do usu√°rio
      const userCompetencies =
        await this.sparseCompetencyService.getAllUserCompetencies(profileId);

      // Buscar quest√µes baseadas nas compet√™ncias
      const questions = await this.dynamicQuestionsService.getDynamicQuestions({
        profileId,
        maxQuestions,
      });

      const sessionId = `session_${Date.now()}_${profileId}`;

      return res.json({
        msgCode: 'success',
        data: {
          userCompetencies,
          questions,
          sessionId,
        },
      });
    } catch (error) {
      console.error('Erro ao buscar sess√£o de quest√µes:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
      });
    }
  }

  /**
   * POST /api/questions/session/complete
   * Finaliza sess√£o e atualiza compet√™ncias
   */
  async completeSession(req: Request, res: Response): Promise<Response> {
    try {
      const profileId = (req as any).user?.id;
      if (!profileId) {
        return res.status(401).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
        });
      }

      const { answers } = req.body;

      if (!Array.isArray(answers)) {
        return res.status(400).json({
          success: false,
          message: 'Respostas devem ser um array',
        });
      }

      // Processar cada resposta
      for (const answer of answers) {
        const {
          questionId,
          answer: selectedAnswer,
          isCorrect,
          competencyName,
        } = answer;

        // Salvar resposta do usu√°rio
        await this.saveUserAnswer(
          profileId,
          questionId,
          selectedAnswer,
          isCorrect
        );

        // Atualizar n√≠vel de compet√™ncia
        await this.dynamicQuestionsService.updateCompetencyLevel(
          profileId,
          competencyName,
          isCorrect
        );
      }

      return res.json({
        msgCode: 'success',
        message: 'Sess√£o finalizada com sucesso',
      });
    } catch (error) {
      console.error('Erro ao finalizar sess√£o:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
      });
    }
  }

  /**
   * POST /api/questions/preload
   * Pr√©-carrega dados do usu√°rio ap√≥s login
   */
  async preloadUserData(req: Request, res: Response): Promise<Response> {
    try {
      const profileId = (req as any).user?.id;
      if (!profileId) {
        return res.status(401).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
        });
      }

      // Buscar compet√™ncias do usu√°rio
      const userCompetencies =
        await this.sparseCompetencyService.getAllUserCompetencies(profileId);

      // Buscar algumas quest√µes para cache
      const questions = await this.dynamicQuestionsService.getDynamicQuestions({
        profileId,
        maxQuestions: 10,
      });

      return res.json({
        msgCode: 'success',
        data: {
          userCompetencies,
          questions,
          preloadedAt: new Date().toISOString(),
        },
      });
    } catch (error) {
      console.error('Erro no pr√©-carregamento:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor',
      });
    }
  }

  /**
   * Salva resposta do usu√°rio na tabela user_answers
   */
  private async saveUserAnswer(
    profileId: string,
    questionId: string,
    answer: string,
    isCorrect: boolean
  ) {
    try {
      // Importar o repository dinamicamente para evitar depend√™ncia circular
      const { UserAnswerRepository } = await import(
        '../repositories/user-answer.repository'
      );
      const userAnswerRepository = new UserAnswerRepository();

      await userAnswerRepository.create({
        profileId,
        questionId,
        selectedAlternativeId: answer,
        isCorrect,
        timeSpentSeconds: undefined, // TODO: Implementar tracking de tempo
      });

      console.log(
        `üíæ Resposta salva no banco: quest√£o ${questionId}, correto: ${isCorrect}`
      );
    } catch (error) {
      console.error('‚ùå Erro ao salvar resposta no banco:', error);
      // N√£o falhar o fluxo se o salvamento falhar
      console.log('‚ö†Ô∏è Salvamento falhou, mas continuando o fluxo...');
    }
  }
}
