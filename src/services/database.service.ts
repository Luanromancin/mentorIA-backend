import { createClient } from '@supabase/supabase-js';
import env from '../env';

export class DatabaseService {
  private client;

  constructor() {
    if (!env.SUPABASE_URL || !env.SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error(
        'SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rios para consultas ao banco'
      );
    }

    this.client = createClient(env.SUPABASE_URL, env.SUPABASE_SERVICE_ROLE_KEY);
  }

  /**
   * Busca compet√™ncias de um usu√°rio com detalhes
   */
  async getUserCompetencies(profileId: string): Promise<any[]> {
    const startTime = Date.now();
    console.log(
      `üîç [${new Date().toISOString()}] Iniciando busca de compet√™ncias para usu√°rio ${profileId}...`
    );

    try {
      console.log(
        `‚è±Ô∏è [${new Date().toISOString()}] Criando timeout de 45 segundos...`
      );

      // Timeout progressivo: 45 segundos para a primeira consulta
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
          const elapsed = Date.now() - startTime;
          reject(
            new Error(
              `Timeout: Consulta demorou mais de 45 segundos (${elapsed}ms)`
            )
          );
        }, 45000);
      });

      console.log(
        `üåê [${new Date().toISOString()}] Executando query no Supabase...`
      );
      const queryPromise = this.client
        .from('user_competencies')
        .select(
          `
          profile_id,
          competency_id,
          level,
          last_evaluated_at,
          competencies!inner (
            id,
            code,
            name,
            description
          )
        `
        )
        .eq('profile_id', profileId);

      console.log(
        `‚è≥ [${new Date().toISOString()}] Aguardando resposta do banco...`
      );
      const { data, error } = (await Promise.race([
        queryPromise,
        timeoutPromise,
      ])) as any;

      const elapsed = Date.now() - startTime;
      console.log(
        `üìä [${new Date().toISOString()}] Query executada em ${elapsed}ms`
      );

      if (error) {
        console.error(
          `‚ùå [${new Date().toISOString()}] Erro ao buscar compet√™ncias do usu√°rio:`,
          error
        );
        throw error;
      }

      console.log(
        `‚úÖ [${new Date().toISOString()}] Busca conclu√≠da: ${
          data?.length || 0
        } compet√™ncias encontradas em ${elapsed}ms`
      );
      return data || [];
    } catch (error) {
      const elapsed = Date.now() - startTime;
      console.error(
        `‚ùå [${new Date().toISOString()}] Erro ao buscar compet√™ncias do usu√°rio (${elapsed}ms):`,
        error
      );
      throw error;
    }
  }

  /**
   * Busca quest√µes por compet√™ncia
   */
  async getQuestionsByCompetency(
    competencyName: string,
    limit: number = 10
  ): Promise<any[]> {
    try {
      // Primeiro, buscar quest√µes que correspondem ao subtopic_name
      const { data: questions, error: questionsError } = await this.client
        .from('questions')
        .select('*')
        .eq('subtopic_name', competencyName)
        .limit(limit);

      if (questionsError) {
        console.error('‚ùå Erro ao buscar quest√µes:', questionsError);
        throw questionsError;
      }

      if (!questions || questions.length === 0) {
        console.log(
          `‚ö†Ô∏è Nenhuma quest√£o encontrada para compet√™ncia: ${competencyName}`
        );
        return [];
      }

      // Para cada quest√£o, buscar as alternativas
      const questionsWithAlternatives = await Promise.all(
        questions.map(async (question) => {
          const { data: alternatives, error: alternativesError } =
            await this.client
              .from('alternatives')
              .select('*')
              .eq('question_id', question.id);

          if (alternativesError) {
            console.error(
              `‚ùå Erro ao buscar alternativas para quest√£o ${question.id}:`,
              alternativesError
            );
            return {
              ...question,
              alternatives: [],
            };
          }

          return {
            ...question,
            alternatives: alternatives || [],
          };
        })
      );

      return questionsWithAlternatives;
    } catch (error) {
      console.error(
        `‚ùå Erro ao buscar quest√µes para compet√™ncia ${competencyName}:`,
        error
      );
      throw error;
    }
  }

  /**
   * Atualiza o n√≠vel de uma compet√™ncia para um usu√°rio
   */
  async updateUserCompetencyLevel(
    profileId: string,
    competencyId: string,
    level: number
  ): Promise<void> {
    try {
      const { error } = await this.client.from('user_competencies').upsert({
        profile_id: profileId,
        competency_id: competencyId,
        level: level,
        last_evaluated_at: new Date().toISOString(),
      });

      if (error) {
        console.error('‚ùå Erro ao atualizar n√≠vel da compet√™ncia:', error);
        throw error;
      }
    } catch (error) {
      console.error('‚ùå Erro ao atualizar n√≠vel da compet√™ncia:', error);
      throw error;
    }
  }

  /**
   * Busca uma compet√™ncia espec√≠fica de um usu√°rio
   */
  async getUserCompetency(
    profileId: string,
    competencyId: string
  ): Promise<any | null> {
    try {
      const { data, error } = await this.client
        .from('user_competencies')
        .select('*')
        .eq('profile_id', profileId)
        .eq('competency_id', competencyId)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          // Nenhum resultado encontrado
          return null;
        }
        console.error('‚ùå Erro ao buscar compet√™ncia espec√≠fica:', error);
        throw error;
      }

      return data;
    } catch (error) {
      console.error('‚ùå Erro ao buscar compet√™ncia espec√≠fica:', error);
      throw error;
    }
  }

  /**
   * Remove quest√µes sem alternativas
   */
  async removeQuestionsWithoutAlternatives(): Promise<{
    removedCount: number;
  }> {
    try {
      console.log('üóëÔ∏è Iniciando remo√ß√£o de quest√µes sem alternativas...');

      // Primeiro, buscar quest√µes sem alternativas
      const questionsWithoutAlternatives =
        await this.checkQuestionsWithoutAlternatives();

      if (questionsWithoutAlternatives.length === 0) {
        console.log(
          '‚úÖ Nenhuma quest√£o sem alternativas encontrada para remover'
        );
        return { removedCount: 0 };
      }

      console.log(
        `‚ö†Ô∏è Removendo ${questionsWithoutAlternatives.length} quest√µes sem alternativas...`
      );

      // Extrair IDs das quest√µes para remover
      const questionIds = questionsWithoutAlternatives.map((q) => q.id);

      // Remover as quest√µes
      const { error: deleteError } = await this.client
        .from('questions')
        .delete()
        .in('id', questionIds);

      if (deleteError) {
        console.error('‚ùå Erro ao remover quest√µes:', deleteError);
        throw deleteError;
      }

      console.log(
        `‚úÖ ${questionsWithoutAlternatives.length} quest√µes removidas com sucesso`
      );

      return { removedCount: questionsWithoutAlternatives.length };
    } catch (error) {
      console.error('‚ùå Erro ao remover quest√µes sem alternativas:', error);
      throw error;
    }
  }

  /**
   * Verifica quest√µes sem alternativas
   */
  async checkQuestionsWithoutAlternatives(): Promise<any[]> {
    try {
      console.log('üîç Verificando quest√µes sem alternativas...');

      // Primeiro, buscar todas as quest√µes
      const { data: allQuestions, error: questionsError } =
        await this.client.from('questions').select(`
          id,
          title,
          subtopic_name,
          topic_name
        `);

      if (questionsError) {
        console.error('‚ùå Erro ao buscar quest√µes:', questionsError);
        throw questionsError;
      }

      // Depois, buscar todas as quest√µes que t√™m alternativas
      const { data: questionsWithAlternatives, error: alternativesError } =
        await this.client.from('alternatives').select('question_id');

      if (alternativesError) {
        console.error('‚ùå Erro ao buscar alternativas:', alternativesError);
        throw alternativesError;
      }

      // Criar um Set com IDs de quest√µes que t√™m alternativas
      const questionsWithAlternativesSet = new Set(
        questionsWithAlternatives?.map((a) => a.question_id) || []
      );

      // Filtrar quest√µes que n√£o t√™m alternativas
      const questionsWithoutAlternatives =
        allQuestions?.filter((q) => !questionsWithAlternativesSet.has(q.id)) ||
        [];

      const { data, error } = {
        data: questionsWithoutAlternatives,
        error: null,
      };

      if (error) {
        console.error('‚ùå Erro ao verificar quest√µes sem alternativas:', error);
        throw error;
      }

      console.log(
        `‚ö†Ô∏è Encontradas ${data?.length || 0} quest√µes sem alternativas`
      );
      if (data && data.length > 0) {
        console.log(
          'üìã Quest√µes sem alternativas:',
          data.map((q) => ({
            id: q.id,
            title: q.title,
            subtopic: q.subtopic_name,
            topic: q.topic_name,
          }))
        );
      }

      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao verificar quest√µes sem alternativas:', error);
      throw error;
    }
  }

  /**
   * Inicializa compet√™ncias para um usu√°rio (se n√£o existirem)
   */
  async initializeUserCompetencies(profileId: string): Promise<void> {
    const startTime = Date.now();
    console.log(
      `üöÄ [${new Date().toISOString()}] Inicializando compet√™ncias para usu√°rio ${profileId}...`
    );

    try {
      console.log(
        `‚è±Ô∏è [${new Date().toISOString()}] Criando timeout de 30 segundos para inicializa√ß√£o...`
      );

      // Timeout progressivo: 30 segundos para inicializa√ß√£o
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
          const elapsed = Date.now() - startTime;
          reject(
            new Error(
              `Timeout: Inicializa√ß√£o demorou mais de 30 segundos (${elapsed}ms)`
            )
          );
        }, 30000);
      });

      console.log(
        `üîÑ [${new Date().toISOString()}] Iniciando processo de inicializa√ß√£o...`
      );
      const initPromise = this._initializeUserCompetencies(profileId);

      await Promise.race([initPromise, timeoutPromise]);

      const elapsed = Date.now() - startTime;
      console.log(
        `‚úÖ [${new Date().toISOString()}] Inicializa√ß√£o conclu√≠da com sucesso em ${elapsed}ms`
      );
    } catch (error) {
      const elapsed = Date.now() - startTime;
      console.error(
        `‚ùå [${new Date().toISOString()}] Erro ao inicializar compet√™ncias do usu√°rio (${elapsed}ms):`,
        error
      );
      // N√£o falhar completamente, apenas logar o erro
      console.log(
        `‚ö†Ô∏è [${new Date().toISOString()}] Continuando sem inicializa√ß√£o de compet√™ncias`
      );
    }
  }

  /**
   * M√©todo privado para inicializa√ß√£o real
   */
  private async _initializeUserCompetencies(profileId: string): Promise<void> {
    const startTime = Date.now();
    console.log(
      `üìã [${new Date().toISOString()}] Iniciando busca de compet√™ncias dispon√≠veis...`
    );

    // Buscar todas as compet√™ncias dispon√≠veis
    const { data: competencies, error: competenciesError } = await this.client
      .from('competencies')
      .select('id')
      .limit(1000); // Limitar para evitar problemas

    const step1Time = Date.now() - startTime;
    console.log(
      `üìä [${new Date().toISOString()}] Busca de compet√™ncias conclu√≠da em ${step1Time}ms`
    );

    if (competenciesError) {
      console.error(
        `‚ùå [${new Date().toISOString()}] Erro ao buscar compet√™ncias:`,
        competenciesError
      );
      throw competenciesError;
    }

    if (!competencies || competencies.length === 0) {
      console.log(
        `‚ö†Ô∏è [${new Date().toISOString()}] Nenhuma compet√™ncia encontrada no banco`
      );
      return;
    }

    console.log(
      `üìà [${new Date().toISOString()}] Encontradas ${
        competencies.length
      } compet√™ncias dispon√≠veis`
    );

    console.log(
      `üîç [${new Date().toISOString()}] Buscando compet√™ncias existentes do usu√°rio...`
    );

    // Buscar compet√™ncias existentes do usu√°rio em uma √∫nica query
    const { data: existingCompetencies, error: existingError } =
      await this.client
        .from('user_competencies')
        .select('competency_id')
        .eq('profile_id', profileId);

    const step2Time = Date.now() - startTime;
    console.log(
      `üìä [${new Date().toISOString()}] Busca de compet√™ncias existentes conclu√≠da em ${step2Time}ms`
    );

    if (existingError) {
      console.error(
        `‚ùå [${new Date().toISOString()}] Erro ao buscar compet√™ncias existentes:`,
        existingError
      );
      throw existingError;
    }

    const existingCompetencyIds = new Set(
      (existingCompetencies || []).map((comp: any) => comp.competency_id)
    );

    console.log(
      `üìä [${new Date().toISOString()}] Usu√°rio j√° possui ${
        existingCompetencyIds.size
      } compet√™ncias`
    );

    // Filtrar compet√™ncias que n√£o existem
    const missingCompetencies = competencies.filter(
      (comp: any) => !existingCompetencyIds.has(comp.id)
    );

    console.log(
      `üìã [${new Date().toISOString()}] Faltam ${
        missingCompetencies.length
      } compet√™ncias para inicializar`
    );

    if (missingCompetencies.length === 0) {
      console.log(
        `‚úÖ [${new Date().toISOString()}] Usu√°rio ${profileId} j√° tem todas as compet√™ncias inicializadas`
      );
      return;
    }

    console.log(
      `üíæ [${new Date().toISOString()}] Preparando dados para inser√ß√£o...`
    );

    // Inserir todas as compet√™ncias faltantes em uma √∫nica opera√ß√£o
    const now = new Date().toISOString();
    const insertData = missingCompetencies.map((comp: any) => ({
      profile_id: profileId,
      competency_id: comp.id,
      level: 0,
      last_evaluated_at: now,
    }));

    console.log(
      `üöÄ [${new Date().toISOString()}] Inserindo ${
        insertData.length
      } compet√™ncias no banco...`
    );

    const { error: insertError } = await this.client
      .from('user_competencies')
      .insert(insertData);

    const totalTime = Date.now() - startTime;
    console.log(
      `üìä [${new Date().toISOString()}] Opera√ß√£o de inser√ß√£o conclu√≠da em ${totalTime}ms`
    );

    if (insertError) {
      console.error(
        `‚ùå [${new Date().toISOString()}] Erro ao inserir compet√™ncias:`,
        insertError
      );
      throw insertError;
    }

    console.log(
      `‚úÖ [${new Date().toISOString()}] ${
        missingCompetencies.length
      } compet√™ncias inicializadas para usu√°rio ${profileId} em ${totalTime}ms`
    );
  }
}

export default new DatabaseService();
