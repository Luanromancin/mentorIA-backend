import { Sequelize } from 'sequelize';
import env from '../env';

// FunÃ§Ã£o para criar configuraÃ§Ã£o do banco
const createDatabaseConfig = () => {
  // Usar SQLite em memÃ³ria para testes e produÃ§Ã£o (Render)
  if (env.NODE_ENV === 'test' || env.NODE_ENV === 'production') {
    console.log(`ðŸ”§ Usando SQLite em memÃ³ria para ${env.NODE_ENV}`);
    return {
      dialect: 'sqlite' as const,
      storage: ':memory:',
      logging: false,
      define: {
        timestamps: true,
        underscored: true,
      },
    };
  }

  // Para desenvolvimento local, usar SQLite local
  console.log('ðŸ”§ Usando SQLite local para desenvolvimento');
  console.log('ðŸ”§ Supabase serÃ¡ usado apenas via API para autenticaÃ§Ã£o');

  return {
    dialect: 'sqlite' as const,
    storage: './dev.sqlite',
    logging: false,
    define: {
      timestamps: true,
      underscored: true,
    },
  };
};

const sequelize = new Sequelize(createDatabaseConfig());

export default sequelize;
