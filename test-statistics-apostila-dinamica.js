const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testStatisticsApostilaDinamica() {
    console.log('üß™ Testando estat√≠sticas da apostila din√¢mica...\n');

    try {
        // 1. Verificar se a tabela user_statistics existe
        console.log('1. Verificando estrutura da tabela user_statistics...');
        const { data: tableInfo, error: tableError } = await supabase
            .from('user_statistics')
            .select('*')
            .limit(1);

        if (tableError) {
            console.error('‚ùå Erro ao acessar tabela user_statistics:', tableError);
            return;
        }

        console.log('‚úÖ Tabela user_statistics acess√≠vel\n');

        // 2. Buscar estat√≠sticas existentes
        console.log('2. Buscando estat√≠sticas existentes...');
        const { data: existingStats, error: statsError } = await supabase
            .from('user_statistics')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(10);

        if (statsError) {
            console.error('‚ùå Erro ao buscar estat√≠sticas:', statsError);
            return;
        }

        console.log(`‚úÖ Encontradas ${existingStats.length} estat√≠sticas existentes`);

        if (existingStats.length > 0) {
            console.log('üìä √öltimas estat√≠sticas:');
            existingStats.slice(0, 3).forEach((stat, index) => {
                console.log(`   ${index + 1}. ${stat.subtopic_name} (${stat.topic_name}): ${stat.correct_answers}/${stat.questions_answered} quest√µes`);
            });
        }

        console.log('\n3. Testando fun√ß√£o de estat√≠sticas...');

        // 3. Testar a fun√ß√£o get_user_statistics
        const { data: userStats, error: userStatsError } = await supabase
            .rpc('get_user_statistics', {
                p_user_id: 'test-user-id'
            });

        if (userStatsError) {
            console.error('‚ùå Erro ao chamar get_user_statistics:', userStatsError);
        } else {
            console.log('‚úÖ Fun√ß√£o get_user_statistics executada com sucesso');
            console.log('üìä Estrutura retornada:', JSON.stringify(userStats, null, 2));
        }

        // 4. Verificar se h√° dados de apostila din√¢mica
        console.log('\n4. Verificando dados espec√≠ficos da apostila din√¢mica...');

        const { data: apostilaStats, error: apostilaError } = await supabase
            .from('user_statistics')
            .select('*')
            .or('subtopic_name.eq.√Ålgebra Linear,subtopic_name.eq.C√°lculo Diferencial,subtopic_name.eq.Geometria Anal√≠tica')
            .order('created_at', { ascending: false })
            .limit(5);

        if (apostilaError) {
            console.error('‚ùå Erro ao buscar estat√≠sticas da apostila:', apostilaError);
        } else {
            console.log(`‚úÖ Encontradas ${apostilaStats.length} estat√≠sticas de compet√™ncias da apostila din√¢mica`);

            if (apostilaStats.length > 0) {
                console.log('üìà Estat√≠sticas da apostila din√¢mica:');
                apostilaStats.forEach((stat, index) => {
                    const accuracy = stat.questions_answered > 0
                        ? Math.round((stat.correct_answers / stat.questions_answered) * 100)
                        : 0;
                    console.log(`   ${index + 1}. ${stat.subtopic_name}: ${stat.correct_answers}/${stat.questions_answered} (${accuracy}%)`);
                });
            } else {
                console.log('‚ö†Ô∏è Nenhuma estat√≠stica encontrada para compet√™ncias da apostila din√¢mica');
                console.log('üí° Isso pode indicar que as respostas da apostila din√¢mica n√£o est√£o sendo registradas');
            }
        }

        console.log('\nüéØ Resumo do teste:');
        console.log('‚úÖ Tabela user_statistics est√° acess√≠vel');
        console.log('‚úÖ Fun√ß√£o get_user_statistics est√° funcionando');

        if (apostilaStats.length > 0) {
            console.log('‚úÖ Estat√≠sticas da apostila din√¢mica est√£o sendo registradas');
        } else {
            console.log('‚ö†Ô∏è Estat√≠sticas da apostila din√¢mica n√£o foram encontradas');
            console.log('üí° Verifique se as respostas est√£o sendo enviadas corretamente');
        }

    } catch (error) {
        console.error('‚ùå Erro geral no teste:', error);
    }
}

// Executar o teste
testStatisticsApostilaDinamica();
