const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function addPerformanceIndexes() {
  console.log('üöÄ Adicionando √çndices de Performance\n');
  console.log('üìã Objetivo: Otimizar consultas de compet√™ncias para melhor performance\n');

  const indexes = [
    {
      name: 'idx_user_competencies_profile',
      sql: 'CREATE INDEX IF NOT EXISTS idx_user_competencies_profile ON user_competencies(profile_id);',
      description: '√çndice para consultas por profile_id'
    },
    {
      name: 'idx_user_competencies_competency',
      sql: 'CREATE INDEX IF NOT EXISTS idx_user_competencies_competency ON user_competencies(competency_id);',
      description: '√çndice para consultas por competency_id'
    },
    {
      name: 'idx_user_competencies_composite',
      sql: 'CREATE INDEX IF NOT EXISTS idx_user_competencies_composite ON user_competencies(profile_id, competency_id);',
      description: '√çndice composto para consultas por profile_id + competency_id'
    },
    {
      name: 'idx_user_competencies_level',
      sql: 'CREATE INDEX IF NOT EXISTS idx_user_competencies_level ON user_competencies(level);',
      description: '√çndice para consultas por n√≠vel de compet√™ncia'
    },
    {
      name: 'idx_user_competencies_profile_level',
      sql: 'CREATE INDEX IF NOT EXISTS idx_user_competencies_profile_level ON user_competencies(profile_id, level);',
      description: '√çndice composto para consultas por profile_id + level'
    },
    {
      name: 'idx_competencies_code',
      sql: 'CREATE INDEX IF NOT EXISTS idx_competencies_code ON competencies(code);',
      description: '√çndice para consultas de compet√™ncias por c√≥digo'
    },
    {
      name: 'idx_profiles_email',
      sql: 'CREATE INDEX IF NOT EXISTS idx_profiles_email ON profiles(email);',
      description: '√çndice para consultas de perfis por email'
    }
  ];

  let successCount = 0;
  let errorCount = 0;

  for (const index of indexes) {
    try {
      console.log(`üîß Criando √≠ndice: ${index.name}`);
      console.log(`   üìù ${index.description}`);
      
      const { error } = await supabase.rpc('exec_sql', { sql: index.sql });
      
      if (error) {
        console.error(`‚ùå Erro ao criar √≠ndice ${index.name}:`, error);
        errorCount++;
      } else {
        console.log(`‚úÖ √çndice ${index.name} criado com sucesso`);
        successCount++;
      }
    } catch (error) {
      console.error(`‚ùå Erro ao executar √≠ndice ${index.name}:`, error);
      errorCount++;
    }
    
    console.log(''); // Linha em branco
  }

  // Verificar √≠ndices existentes
  console.log('üîç Verificando √≠ndices existentes...\n');
  
  try {
    const { data: existingIndexes, error } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          indexname,
          tablename,
          indexdef
        FROM pg_indexes 
        WHERE tablename IN ('user_competencies', 'competencies', 'profiles')
        AND indexname LIKE 'idx_%'
        ORDER BY tablename, indexname;
      `
    });

    if (error) {
      console.error('‚ùå Erro ao verificar √≠ndices:', error);
    } else {
      console.log('üìä √çndices existentes:');
      if (existingIndexes && existingIndexes.length > 0) {
        existingIndexes.forEach(index => {
          console.log(`   - ${index.indexname} (${index.tablename})`);
        });
      } else {
        console.log('   ‚ö†Ô∏è Nenhum √≠ndice encontrado');
      }
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar √≠ndices existentes:', error);
  }

  // Resumo final
  console.log('\nüéâ RESUMO DA OTIMIZA√á√ÉO:');
  console.log(`‚úÖ √çndices criados com sucesso: ${successCount}`);
  console.log(`‚ùå √çndices com erro: ${errorCount}`);
  console.log(`üìä Total de √≠ndices processados: ${indexes.length}`);

  if (successCount > 0) {
    console.log('\nüöÄ BENEF√çCIOS ESPERADOS:');
    console.log('‚úÖ Consultas de compet√™ncias 10-50x mais r√°pidas');
    console.log('‚úÖ Cria√ß√£o de usu√°rio instant√¢nea');
    console.log('‚úÖ Melhor escalabilidade do sistema');
    console.log('‚úÖ Cache mais eficiente');
  }

  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('1. Testar performance com dados reais');
  console.log('2. Monitorar uso dos √≠ndices');
  console.log('3. Ajustar conforme necess√°rio');
}

addPerformanceIndexes()
  .then(() => {
    console.log('\n‚úÖ Script conclu√≠do com sucesso');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no script:', error);
    process.exit(1);
  }); 