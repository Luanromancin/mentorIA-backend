const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkUserCompetenciesStatus() {
  console.log('üîç Verificando Status das Compet√™ncias do Usu√°rio\n');

  try {
    // 1. Listar usu√°rios recentes
    console.log('1Ô∏è‚É£ Buscando usu√°rios recentes...');
    
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, email, name, created_at')
      .order('created_at', { ascending: false })
      .limit(5);

    if (profilesError) {
      console.error('‚ùå Erro ao buscar perfis:', profilesError);
      return;
    }

    console.log(`‚úÖ Encontrados ${profiles.length} usu√°rios recentes:`);
    profiles.forEach((profile, index) => {
      console.log(`   ${index + 1}. ${profile.email} (${profile.name}) - ${profile.created_at}`);
    });

    if (profiles.length === 0) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado');
      return;
    }

    // 2. Verificar compet√™ncias de cada usu√°rio
    console.log('\n2Ô∏è‚É£ Verificando compet√™ncias de cada usu√°rio...\n');

    for (const profile of profiles) {
      console.log(`üîç Analisando usu√°rio: ${profile.email}`);
      
      // Buscar compet√™ncias do usu√°rio
      const { data: userCompetencies, error: competenciesError } = await supabase
        .from('user_competencies')
        .select(`
          level,
          last_evaluated_at,
          competencies (
            id,
            name,
            code
          )
        `)
        .eq('profile_id', profile.id);

      if (competenciesError) {
        console.error(`‚ùå Erro ao buscar compet√™ncias de ${profile.email}:`, competenciesError);
        continue;
      }

      console.log(`   üìä Compet√™ncias encontradas: ${userCompetencies.length}`);
      
      if (userCompetencies.length === 0) {
        console.log(`   ‚ö†Ô∏è  NENHUMA COMPET√äNCIA CRIADA!`);
        console.log(`   üö® PROBLEMA: Usu√°rio n√£o conseguir√° usar o sistema de apostila din√¢mica`);
      } else {
        // Agrupar por n√≠vel
        const byLevel = userCompetencies.reduce((acc, comp) => {
          acc[comp.level] = (acc[comp.level] || 0) + 1;
          return acc;
        }, {});

        console.log(`   üìà Distribui√ß√£o por n√≠vel:`);
        Object.entries(byLevel).forEach(([level, count]) => {
          console.log(`      - N√≠vel ${level}: ${count} compet√™ncias`);
        });

        // Mostrar algumas compet√™ncias como exemplo
        console.log(`   üìù Exemplos de compet√™ncias:`);
        userCompetencies.slice(0, 3).forEach(comp => {
          console.log(`      - ${comp.competencies.name}: N√≠vel ${comp.level}`);
        });
      }

      console.log(''); // Linha em branco
    }

    // 3. Verificar total de compet√™ncias dispon√≠veis no sistema
    console.log('3Ô∏è‚É£ Verificando compet√™ncias dispon√≠veis no sistema...');
    
    const { data: allCompetencies, error: allCompetenciesError } = await supabase
      .from('competencies')
      .select('id, name, code')
      .order('code');

    if (allCompetenciesError) {
      console.error('‚ùå Erro ao buscar compet√™ncias do sistema:', allCompetenciesError);
    } else {
      console.log(`‚úÖ Total de compet√™ncias no sistema: ${allCompetencies.length}`);
    }

    // 4. An√°lise do problema
    console.log('\nüö® AN√ÅLISE DO PROBLEMA:');
    console.log('‚ùå Usu√°rios novos N√ÉO t√™m compet√™ncias criadas');
    console.log('‚ùå Sistema de apostila din√¢mica N√ÉO funcionar√°');
    console.log('‚ùå Lazy loading est√° quebrando a funcionalidade');

    console.log('\nüí° SOLU√á√ïES POSS√çVEIS:');
    console.log('1. ‚úÖ Criar compet√™ncias com n√≠vel 0 na cria√ß√£o do usu√°rio');
    console.log('2. ‚úÖ Modificar lazy loading para criar compet√™ncias na primeira consulta');
    console.log('3. ‚úÖ Implementar fallback para compet√™ncias n√£o existentes');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkUserCompetenciesStatus()
  .then(() => {
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro na verifica√ß√£o:', error);
    process.exit(1);
  }); 