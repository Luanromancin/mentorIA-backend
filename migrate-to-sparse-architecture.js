const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function migrateToSparseArchitecture() {
  console.log('üöÄ Migrando para Arquitetura de Dados Esparsos\n');
  console.log('üìã Objetivos:');
  console.log('1. ‚úÖ Remover registros com n√≠vel 0 da tabela user_competencies');
  console.log('2. ‚úÖ Manter apenas registros com n√≠vel > 0');
  console.log('3. ‚úÖ Otimizar performance e espa√ßo em disco\n');

  try {
    // 1. Verificar dados atuais
    console.log('1Ô∏è‚É£ Verificando dados atuais...');
    const { data: currentData, error: currentError } = await supabase
      .from('user_competencies')
      .select('*')
      .limit(10);

    if (currentError) {
      console.error('‚ùå Erro ao verificar dados atuais:', currentError);
      return;
    }

    console.log(`üìä Dados atuais: ${currentData?.length || 0} registros (amostra)`);
    
    if (currentData && currentData.length > 0) {
      console.log('üìã Exemplo de dados:');
      currentData.forEach((record, index) => {
        console.log(`   ${index + 1}. Usu√°rio: ${record.profile_id}, Compet√™ncia: ${record.competency_id}, N√≠vel: ${record.level}`);
      });
    }

    // 2. Contar registros com n√≠vel 0
    console.log('\n2Ô∏è‚É£ Contando registros com n√≠vel 0...');
    const { data: levelZeroData, error: levelZeroError } = await supabase
      .from('user_competencies')
      .select('*')
      .eq('level', 0);

    if (levelZeroError) {
      console.error('‚ùå Erro ao contar registros n√≠vel 0:', levelZeroError);
      return;
    }

    const levelZeroCount = levelZeroData?.length || 0;
    console.log(`üìä Registros com n√≠vel 0: ${levelZeroCount}`);

    // 3. Contar registros com n√≠vel > 0
    console.log('\n3Ô∏è‚É£ Contando registros com n√≠vel > 0...');
    const { data: levelGreaterZeroData, error: levelGreaterZeroError } = await supabase
      .from('user_competencies')
      .select('*')
      .gt('level', 0);

    if (levelGreaterZeroError) {
      console.error('‚ùå Erro ao contar registros n√≠vel > 0:', levelGreaterZeroError);
      return;
    }

    const levelGreaterZeroCount = levelGreaterZeroData?.length || 0;
    console.log(`üìä Registros com n√≠vel > 0: ${levelGreaterZeroCount}`);

    // 4. Perguntar se deve prosseguir
    console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o ir√° remover registros com n√≠vel 0!');
    console.log(`üìä Total de registros a serem removidos: ${levelZeroCount}`);
    console.log(`üìä Registros que ser√£o mantidos: ${levelGreaterZeroCount}`);
    
    // Simular confirma√ß√£o (em produ√ß√£o, seria uma pergunta real)
    console.log('\n‚úÖ Simulando confirma√ß√£o para prosseguir...');

    // 5. Remover registros com n√≠vel 0
    console.log('\n4Ô∏è‚É£ Removendo registros com n√≠vel 0...');
    const { error: deleteError } = await supabase
      .from('user_competencies')
      .delete()
      .eq('level', 0);

    if (deleteError) {
      console.error('‚ùå Erro ao remover registros n√≠vel 0:', deleteError);
      return;
    }

    console.log(`‚úÖ ${levelZeroCount} registros com n√≠vel 0 removidos`);

    // 6. Verificar resultado final
    console.log('\n5Ô∏è‚É£ Verificando resultado final...');
    const { data: finalData, error: finalError } = await supabase
      .from('user_competencies')
      .select('*');

    if (finalError) {
      console.error('‚ùå Erro ao verificar dados finais:', finalError);
      return;
    }

    const finalCount = finalData?.length || 0;
    console.log(`üìä Registros finais: ${finalCount}`);
    console.log(`üìä Registros mantidos: ${levelGreaterZeroCount}`);
    console.log(`üìä Registros removidos: ${levelZeroCount}`);

    // 7. Calcular economia de espa√ßo
    const estimatedSpaceSaved = levelZeroCount * 100; // Estimativa de 100 bytes por registro
    console.log(`üíæ Espa√ßo estimado economizado: ~${estimatedSpaceSaved} bytes`);

    // 8. Resumo da migra√ß√£o
    console.log('\nüéâ MIGRA√á√ÉO PARA DADOS ESPARSOS CONCLU√çDA!');
    console.log('\n‚úÖ BENEF√çCIOS ALCAN√áADOS:');
    console.log(`‚úÖ ${levelZeroCount} registros desnecess√°rios removidos`);
    console.log(`‚úÖ ${levelGreaterZeroCount} registros importantes mantidos`);
    console.log('‚úÖ Consultas mais r√°pidas (menos dados para processar)');
    console.log('‚úÖ Menor uso de espa√ßo em disco');
    console.log('‚úÖ Melhor performance de I/O');
    console.log('‚úÖ Escalabilidade otimizada');

    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. ‚úÖ Testar cria√ß√£o de novos usu√°rios (sem inser√ß√µes em massa)');
    console.log('2. ‚úÖ Verificar que n√≠vel 0 = impl√≠cito funciona corretamente');
    console.log('3. ‚úÖ Testar atualiza√ß√µes de compet√™ncias (n√≠vel > 0 = persistido)');
    console.log('4. ‚úÖ Validar performance das consultas');

    console.log('\nüöÄ ARQUITETURA DE DADOS ESPARSOS ATIVA!');

  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
  }
}

migrateToSparseArchitecture()
  .then(() => {
    console.log('\n‚úÖ Script conclu√≠do');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no script:', error);
    process.exit(1);
  }); 