const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testCompleteOptimization() {
  console.log('üöÄ Teste Completo da Otimiza√ß√£o de Performance\n');
  console.log('üìã Objetivo: Validar que o sistema otimizado funciona corretamente\n');

  try {
    // 1. Criar usu√°rio via API (simulando o frontend)
    console.log('1Ô∏è‚É£ Testando cria√ß√£o de usu√°rio via API...');
    
    const testEmail = `complete-test-${Date.now()}@example.com`;
    const testPassword = 'test123456';
    const testName = 'Usu√°rio Teste Completo';
    const testInstitution = 'Institui√ß√£o Teste';

    const startTime = Date.now();

    // Simular chamada da API
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true,
      user_metadata: {
        name: testName,
        institution: testInstitution,
      },
    });

    if (authError) {
      console.error('‚ùå Erro ao criar usu√°rio:', authError);
      return;
    }

    // Criar perfil (simulando o que o sistema faz)
    const { error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: authData.user.id,
        email: testEmail,
        name: testName,
        institution: testInstitution,
      });

    if (profileError) {
      console.error('‚ùå Erro ao criar perfil:', profileError);
      return;
    }

    const userCreationTime = Date.now() - startTime;
    console.log(`‚úÖ Usu√°rio e perfil criados em ${userCreationTime}ms`);
    console.log('   üìù ID:', authData.user.id);

    // 2. Verificar que n√£o h√° compet√™ncias inicializadas
    console.log('\n2Ô∏è‚É£ Verificando compet√™ncias iniciais...');
    
    const { data: initialCompetencies, error: initialError } = await supabase
      .from('user_competencies')
      .select('*')
      .eq('profile_id', authData.user.id);

    if (initialError) {
      console.error('‚ùå Erro ao verificar compet√™ncias:', initialError);
      return;
    }

    console.log(`‚úÖ Compet√™ncias iniciais: ${initialCompetencies.length} (esperado: 0)`);

    // 3. Simular uso do sistema - buscar compet√™ncias por n√≠vel
    console.log('\n3Ô∏è‚É£ Simulando busca de compet√™ncias por n√≠vel...');
    
    const searchStart = Date.now();
    
    // Buscar compet√™ncias de n√≠vel 0 (que n√£o existem ainda)
    const { data: level0Competencies, error: searchError } = await supabase
      .from('user_competencies')
      .select(`
        level,
        competencies (
          id,
          name,
          code
        )
      `)
      .eq('profile_id', authData.user.id)
      .eq('level', 0);

    if (searchError) {
      console.error('‚ùå Erro ao buscar compet√™ncias:', searchError);
      return;
    }

    const searchTime = Date.now() - searchStart;
    console.log(`‚úÖ Busca conclu√≠da em ${searchTime}ms`);
    console.log(`   üìä Compet√™ncias n√≠vel 0 encontradas: ${level0Competencies.length}`);

    // 4. Simular cria√ß√£o de compet√™ncia sob demanda
    console.log('\n4Ô∏è‚É£ Simulando cria√ß√£o sob demanda...');
    
    const { data: allCompetencies, error: competenciesError } = await supabase
      .from('competencies')
      .select('id, name, code')
      .limit(3);

    if (competenciesError) {
      console.error('‚ùå Erro ao buscar compet√™ncias:', competenciesError);
      return;
    }

    const demandStart = Date.now();
    let createdCount = 0;

    for (const competency of allCompetencies) {
      // Verificar se existe
      const { data: existing } = await supabase
        .from('user_competencies')
        .select('level')
        .eq('profile_id', authData.user.id)
        .eq('competency_id', competency.id)
        .single();

      if (!existing) {
        // Criar com n√≠vel 0
        const { error: insertError } = await supabase
          .from('user_competencies')
          .insert({
            profile_id: authData.user.id,
            competency_id: competency.id,
            level: 0,
            last_evaluated_at: new Date().toISOString(),
          });

        if (!insertError) {
          createdCount++;
          console.log(`   ‚úÖ ${competency.name} criada sob demanda`);
        }
      }
    }

    const demandTime = Date.now() - demandStart;
    console.log(`‚úÖ ${createdCount} compet√™ncias criadas sob demanda em ${demandTime}ms`);

    // 5. Simular atualiza√ß√£o de compet√™ncia (ap√≥s responder quest√µes)
    console.log('\n5Ô∏è‚É£ Simulando atualiza√ß√£o de compet√™ncia...');
    
    if (createdCount > 0) {
      const updateStart = Date.now();
      
      // Atualizar primeira compet√™ncia para n√≠vel 1
      const { error: updateError } = await supabase
        .from('user_competencies')
        .update({
          level: 1,
          last_evaluated_at: new Date().toISOString(),
        })
        .eq('profile_id', authData.user.id)
        .eq('competency_id', allCompetencies[0].id);

      if (updateError) {
        console.error('‚ùå Erro ao atualizar compet√™ncia:', updateError);
      } else {
        const updateTime = Date.now() - updateStart;
        console.log(`‚úÖ Compet√™ncia ${allCompetencies[0].name} atualizada para n√≠vel 1 em ${updateTime}ms`);
      }
    }

    // 6. Verificar estado final
    console.log('\n6Ô∏è‚É£ Verificando estado final...');
    
    const { data: finalCompetencies, error: finalError } = await supabase
      .from('user_competencies')
      .select(`
        level,
        last_evaluated_at,
        competencies (
          id,
          name,
          code
        )
      `)
      .eq('profile_id', authData.user.id);

    if (finalError) {
      console.error('‚ùå Erro ao verificar estado final:', finalError);
      return;
    }

    console.log(`‚úÖ Estado final: ${finalCompetencies.length} compet√™ncias`);
    finalCompetencies.forEach(comp => {
      console.log(`   - ${comp.competencies.name}: N√≠vel ${comp.level}`);
    });

    // 7. Limpeza
    console.log('\n7Ô∏è‚É£ Limpando dados de teste...');
    
    const { error: deleteError } = await supabase.auth.admin.deleteUser(
      authData.user.id
    );

    if (deleteError) {
      console.error('‚ùå Erro ao deletar usu√°rio:', deleteError);
    } else {
      console.log('‚úÖ Usu√°rio removido com sucesso');
    }

    // 8. Resumo final
    const totalTime = Date.now() - startTime;
    
    console.log('\nüéâ TESTE COMPLETO CONCLU√çDO COM SUCESSO!');
    console.log('\nüìä RESUMO FINAL:');
    console.log(`‚è±Ô∏è  Tempo total: ${totalTime}ms`);
    console.log(`üìä Compet√™ncias criadas: ${createdCount}`);
    console.log(`üìä Compet√™ncias atualizadas: ${createdCount > 0 ? 1 : 0}`);

    console.log('\nüöÄ SISTEMA OTIMIZADO FUNCIONANDO:');
    console.log('‚úÖ Cria√ß√£o de usu√°rio instant√¢nea');
    console.log('‚úÖ Compet√™ncias criadas sob demanda');
    console.log('‚úÖ Atualiza√ß√µes funcionando');
    console.log('‚úÖ Performance melhorada');

    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('1. Executar √≠ndices SQL no Supabase');
    console.log('2. Testar na interface do usu√°rio');
    console.log('3. Monitorar performance em produ√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testCompleteOptimization()
  .then(() => {
    console.log('\n‚úÖ Teste completo conclu√≠do');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no teste:', error);
    process.exit(1);
  }); 