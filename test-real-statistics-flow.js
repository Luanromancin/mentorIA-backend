const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testRealStatisticsFlow() {
  console.log('üß™ Testando fluxo REAL de atualiza√ß√£o das estat√≠sticas...\n');

  const userId = '8691e88d-c6d8-4011-822d-fb5db400035d';

  try {
    // 1. Verificar estat√≠sticas iniciais
    console.log('üìä 1. Verificando estat√≠sticas iniciais:');
    const { data: initialStats, error: statsError } = await supabase
      .rpc('get_user_statistics', { user_profile_id: userId });

    if (statsError) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', statsError);
      return;
    }

    console.log('‚úÖ Estat√≠sticas iniciais:');
    console.log(`   - Quest√µes respondidas: ${initialStats.general.total_questions}`);
    console.log(`   - Quest√µes corretas: ${initialStats.general.total_correct}`);
    console.log(`   - Acur√°cia geral: ${initialStats.general.overall_accuracy}%`);
    console.log(`   - Sequ√™ncia de estudos: ${initialStats.general.study_streak}`);
    console.log(`   - Testes completados: ${initialStats.general.completed_tests}`);

    // 2. Simular registro de respostas individuais (primeiras 20 quest√µes)
    console.log('\nüéØ 2. Registrando respostas individuais (primeiras 20 quest√µes):');
    
    const mockAnswers = [
      { questionId: 'q1', isCorrect: true, topicName: '√Ålgebra', subtopicName: 'fun√ß√µes' },
      { questionId: 'q2', isCorrect: false, topicName: '√Ålgebra', subtopicName: 'fun√ß√µes' },
      { questionId: 'q3', isCorrect: true, topicName: 'Geometria', subtopicName: 'tri√¢ngulos' },
      { questionId: 'q4', isCorrect: true, topicName: '√Ålgebra', subtopicName: 'sistemas' },
      { questionId: 'q5', isCorrect: false, topicName: 'Geometria', subtopicName: 'c√≠rculos' },
      { questionId: 'q6', isCorrect: true, topicName: 'Trigonometria', subtopicName: 'fun√ß√µes' },
      { questionId: 'q7', isCorrect: true, topicName: '√Ålgebra', subtopicName: 'sistemas' },
      { questionId: 'q8', isCorrect: false, topicName: 'Geometria', subtopicName: 'tri√¢ngulos' },
      { questionId: 'q9', isCorrect: true, topicName: 'Trigonometria', subtopicName: 'c√≠rculos' },
      { questionId: 'q10', isCorrect: true, topicName: '√Ålgebra', subtopicName: 'fun√ß√µes' },
      { questionId: 'q11', isCorrect: false, topicName: 'Geometria', subtopicName: 'sistemas' },
      { questionId: 'q12', isCorrect: true, topicName: 'Trigonometria', subtopicName: 'tri√¢ngulos' },
      { questionId: 'q13', isCorrect: true, topicName: '√Ålgebra', subtopicName: 'c√≠rculos' },
      { questionId: 'q14', isCorrect: false, topicName: 'Geometria', subtopicName: 'fun√ß√µes' },
      { questionId: 'q15', isCorrect: true, topicName: 'Trigonometria', subtopicName: 'sistemas' },
      { questionId: 'q16', isCorrect: true, topicName: '√Ålgebra', subtopicName: 'tri√¢ngulos' },
      { questionId: 'q17', isCorrect: false, topicName: 'Geometria', subtopicName: 'c√≠rculos' },
      { questionId: 'q18', isCorrect: true, topicName: 'Trigonometria', subtopicName: 'fun√ß√µes' },
      { questionId: 'q19', isCorrect: true, topicName: '√Ålgebra', subtopicName: 'sistemas' },
      { questionId: 'q20', isCorrect: true, topicName: 'Geometria', subtopicName: 'tri√¢ngulos' }
    ];

    // Simular registro de cada resposta (como o frontend faria)
    console.log('   üìù Registrando cada resposta individual...');
    for (let i = 0; i < 20; i++) {
      const answer = mockAnswers[i];
      console.log(`   - Quest√£o ${i + 1}: ${answer.isCorrect ? '‚úÖ' : '‚ùå'} (${answer.topicName} - ${answer.subtopicName})`);
      
      // Aqui voc√™ simularia a chamada da API /statistics/record-answer
      // Por enquanto, vamos apenas simular
    }

    // 3. Registrar estudo di√°rio (20 quest√µes)
    console.log('\nüìä 3. Registrando estudo di√°rio (20 quest√µes):');
    const { data: studyResult, error: studyError } = await supabase
      .rpc('register_daily_study', {
        user_profile_id: userId,
        questions_count: 20
      });

    if (studyError) {
      console.error('‚ùå Erro ao registrar estudo di√°rio:', studyError);
    } else {
      console.log('‚úÖ Estudo di√°rio registrado:', studyResult);
    }

    // 4. Verificar estat√≠sticas ap√≥s primeira sess√£o
    console.log('\nüìä 4. Verificando estat√≠sticas ap√≥s primeira sess√£o:');
    const { data: statsAfter20, error: statsAfterError } = await supabase
      .rpc('get_user_statistics', { user_profile_id: userId });

    if (statsAfterError) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', statsAfterError);
    } else {
      console.log('‚úÖ Estat√≠sticas ap√≥s 20 quest√µes:');
      console.log(`   - Quest√µes respondidas: ${statsAfter20.general.total_questions}`);
      console.log(`   - Quest√µes corretas: ${statsAfter20.general.total_correct}`);
      console.log(`   - Acur√°cia geral: ${statsAfter20.general.overall_accuracy}%`);
      console.log(`   - Sequ√™ncia de estudos: ${statsAfter20.general.study_streak}`);
      console.log(`   - Testes completados: ${statsAfter20.general.completed_tests}`);
    }

    // 5. Comparar mudan√ßas
    console.log('\nüìä 5. Resumo das mudan√ßas:');
    console.log(`   - Quest√µes respondidas: ${initialStats.general.total_questions} ‚Üí ${statsAfter20.general.total_questions} (+${statsAfter20.general.total_questions - initialStats.general.total_questions})`);
    console.log(`   - Quest√µes corretas: ${initialStats.general.total_correct} ‚Üí ${statsAfter20.general.total_correct} (+${statsAfter20.general.total_correct - initialStats.general.total_correct})`);
    console.log(`   - Acur√°cia: ${initialStats.general.overall_accuracy}% ‚Üí ${statsAfter20.general.overall_accuracy}%`);
    console.log(`   - Sequ√™ncia: ${initialStats.general.study_streak} ‚Üí ${statsAfter20.general.study_streak}`);
    console.log(`   - Testes: ${initialStats.general.completed_tests} ‚Üí ${statsAfter20.general.completed_tests} (+${statsAfter20.general.completed_tests - initialStats.general.completed_tests})`);

    // 6. Explicar o que est√° acontecendo
    console.log('\nüîç 6. An√°lise do comportamento:');
    console.log('   üìù O que est√° funcionando:');
    console.log('      ‚úÖ Sequ√™ncia de estudos (atualizada pelo register_daily_study)');
    console.log('      ‚úÖ Testes completados (atualizado pelo register_daily_study)');
    console.log('   üìù O que N√ÉO est√° funcionando:');
    console.log('      ‚ùå Quest√µes respondidas (precisa do registro individual)');
    console.log('      ‚ùå Quest√µes corretas (precisa do registro individual)');
    console.log('      ‚ùå Acur√°cia geral (calculada a partir das quest√µes)');
    console.log('\n   üí° Para que funcione completamente, o frontend precisa:');
    console.log('      1. Registrar cada resposta individual via /statistics/record-answer');
    console.log('      2. Chamar register_daily_study ao final da sess√£o');
    console.log('      3. As estat√≠sticas ser√£o atualizadas automaticamente');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testRealStatisticsFlow();
